buildscript {
    ext {
        mavenVersion = "$mavenVersionCore"
    }

}

plugins {
    id 'java'
    id 'maven'
//    id 'maven-publish'
}

repositories {
  mavenCentral()
}

configurations {
    mavenEmbedder
}

dependencies {
    implementation 'org.apache.maven:maven-plugin-api:3.6.1'
    compileOnly 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.6.0'
    implementation 'org.apache.maven:maven-core:3.5.4'
    implementation 'org.apache.commons:commons-lang3:3.10'
    
    testImplementation 'junit:junit:4.13.1'

    // as per https://stackoverflow.com/a/64726155
	mavenEmbedder 'org.apache.maven:maven-embedder:3.6.3'
	mavenEmbedder 'org.apache.maven:maven-compat:3.6.3'	
    mavenEmbedder 'org.apache.maven.resolver:maven-resolver-connector-basic:1.4.1'
    mavenEmbedder 'org.apache.maven.resolver:maven-resolver-transport-http:1.4.1'
    mavenEmbedder 'org.slf4j:slf4j-simple:1.7.30'
//    mavenEmbedder 'org.apache.maven.wagon:wagon-http:3.4.1'
//    mavenEmbedder 'org.apache.maven.wagon:wagon-provider-api:3.4.1'    

    implementation 'com.appland:appmap-agent:0.5.0'
}

group = 'com.appland'
description = 'Maven plugin to record AppMaps with the appmap.jar agent'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = 'UTF-8'


install.repositories.mavenInstaller.pom.with {
    groupId = 'com.appland'
    artifactId = 'appmap-maven-plugin'
    version = "0.5.0"
    packaging = 'maven-plugin'
    name = 'AppMap Maven Plugin'
    description = 'Maven plugin to record AppMaps with the appmap.jar agent'

}

// runs the plugin description generator
task generatePluginDescriptor(type: JavaExec, dependsOn: compileJava) {
    def pomFile = file("$buildDir/pom.xml")
    def pluginDescriptorFile = new File(project.compileJava.destinationDir, 'META-INF/maven/plugin.xml')
    def directory = buildDir.canonicalPath
    def outputDirectory = compileJava.destinationDir.canonicalPath

    // FIXME: this does not seem to be working
    inputs.files project.compileJava.outputs.files
    outputs.file pluginDescriptorFile

    classpath = configurations.mavenEmbedder
    main = 'org.apache.maven.cli.MavenCli'
    systemProperties['maven.multiModuleProjectDirectory'] = projectDir
    args = [
            '--errors',
            '--batch-mode',
            '--file', "${buildDir}/pom.xml",
            'org.apache.maven.plugins:maven-plugin-plugin:3.6.0:descriptor',
            '-Dproject.build.sourceEncoding=' + compileJava.options.encoding
    ]

    doFirst {
        // we have to do it in this cryptic way, instead of
        // ```
        // project {
        //     build {
        //        directory = directory
        //        outputDirectory = outputDirectory
        //     }
        // }
        // because MavenModel already defines build and so it will
        // result in No such property: _SCRIPT_CLASS_NAME_ for class: org.apache.maven.model.Model
        install.repositories
               .mavenInstaller
               .pom
               .withXml {
                    asNode().appendNode('build')
                            .with {
                                appendNode('directory', directory)
                                appendNode('outputDirectory', outputDirectory)
                            }
               }
               .writeTo(pomFile)

        assert pomFile.file, "${pomFile.canonicalPath}: was not generated"
        logger.info("POM is generated in ${pomFile.canonicalPath}")
    }


    doLast {
        assert pluginDescriptorFile.file, "${pluginDescriptorFile.canonicalPath}: was not generated"
        logger.info("Plugin descriptor is generated in ${pluginDescriptorFile.canonicalPath}")
    }
}

project.jar.dependsOn(generatePluginDescriptor)

apply plugin: 'java' 
java {
    withSourcesJar() 
    withJavadocJar()  //-- fails with errors, see wowrkaround below
}
